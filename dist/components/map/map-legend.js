"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var styled = _interopRequireWildcard(require("styled-components"));

var _d3Color = require("d3-color");

var _colorLegend = _interopRequireDefault(require("../common/color-legend"));

var _defaultSettings = require("../../constants/default-settings");

var _utils = require("../../utils/utils");

function _templateObject() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  padding: 10px 0 10px ", "px;\n  font-size: 11px;\n  border-bottom-color: ", ";\n  border-bottom-style: solid;\n  border-bottom-width: ", ";\n\n  .legend--layer_name {\n    font-size: 12px;\n    padding-right: ", "px;\n    color: ", ";\n    font-weight: 500;\n  }\n  .legend--layer_type {\n    color: ", ";\n    font-weight: 500;\n    font-size: 11px;\n    padding-right: ", "px;\n  }\n\n  .legend--layer__title {\n    padding-right: ", "px;\n  }\n\n  .legend--layer_by {\n    color: ", ";\n  }\n\n  .legend--layer_color_field {\n    color: ", ";\n    font-weight: 500;\n  }\n\n  .legend--layer_color-legend {\n    margin-top: 6px;\n  }\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var StyledMapControlLegend = styled.div(_templateObject(), function (props) {
  return props.theme.mapControl.padding;
}, function (props) {
  return props.theme.panelBorderColor;
}, function (props) {
  return props.last ? 0 : '1px';
}, function (props) {
  return props.theme.mapControl.padding;
}, function (props) {
  return props.theme.textColorHl;
}, function (props) {
  return props.theme.subtextColor;
}, function (props) {
  return props.theme.mapControl.padding;
}, function (props) {
  return props.theme.mapControl.padding;
}, function (props) {
  return props.theme.subtextColor;
}, function (props) {
  return props.theme.textColor;
});

var VisualChannelMetric = function VisualChannelMetric(_ref) {
  var name = _ref.name;
  return _react["default"].createElement("div", {
    className: "legend--layer__title"
  }, _react["default"].createElement("span", {
    className: "legend--layer_by"
  }, "by "), _react["default"].createElement("span", {
    className: "legend--layer_color_field"
  }, name));
};

var LayerSizeLegend = function LayerSizeLegend(_ref2) {
  var label = _ref2.label,
      name = _ref2.name;
  return _react["default"].createElement("div", {
    className: "legend--layer_size-schema"
  }, _react["default"].createElement("p", null, _react["default"].createElement("span", {
    className: "legend--layer_by"
  }, label)), _react["default"].createElement(VisualChannelMetric, {
    name: name
  }));
};

var propTypes = {
  layers: _propTypes["default"].arrayOf(_propTypes["default"].object)
};

var SingleColorLegend = function SingleColorLegend(_ref3) {
  var layer = _ref3.layer,
      width = _ref3.width;
  return _react["default"].createElement(_colorLegend["default"], {
    scaleType: "ordinal",
    displayLabel: false,
    domain: [''],
    fieldType: null,
    range: [_d3Color.rgb.apply(void 0, (0, _toConsumableArray2["default"])(layer.config.color)).toString()],
    width: width
  });
};

var MultiColorLegend = function MultiColorLegend(_ref4) {
  var layer = _ref4.layer,
      width = _ref4.width;
  var _layer$config = layer.config,
      visConfig = _layer$config.visConfig,
      colorField = _layer$config.colorField,
      colorScale = _layer$config.colorScale,
      colorDomain = _layer$config.colorDomain;
  return _react["default"].createElement(_colorLegend["default"], {
    scaleType: colorScale,
    displayLabel: true,
    domain: colorDomain,
    fieldType: colorField && colorField.type || 'real',
    range: visConfig.colorRange.colors,
    width: width
  });
};

var MapLegend = function MapLegend(_ref5) {
  var layers = _ref5.layers;
  return _react["default"].createElement("div", null, layers.map(function (layer, index) {
    if (!layer.isValidToSave()) {
      return null;
    }

    var colorChannelConfig = layer.getVisualChannelDescription('color');
    var enableColorBy = colorChannelConfig.measure;
    var width = _defaultSettings.DIMENSIONS.mapControl.width - 2 * _defaultSettings.DIMENSIONS.mapControl.padding;
    return _react["default"].createElement(StyledMapControlLegend, {
      className: "legend--layer",
      last: index === layers.length - 1,
      key: index
    }, _react["default"].createElement("div", {
      className: "legend--layer_name"
    }, layer.config.label), _react["default"].createElement("div", {
      className: "legend--layer_type"
    }, "".concat((0, _utils.capitalizeFirstLetter)(layer.name), " color")), _react["default"].createElement("div", {
      className: "legend--layer_color-schema"
    }, _react["default"].createElement("div", null, enableColorBy ? _react["default"].createElement(VisualChannelMetric, {
      name: enableColorBy
    }) : null, _react["default"].createElement("div", {
      className: "legend--layer_color-legend"
    }, enableColorBy ? _react["default"].createElement(MultiColorLegend, {
      layer: layer,
      width: width
    }) : _react["default"].createElement(SingleColorLegend, {
      layer: layer,
      width: width
    })))), Object.keys(layer.visualChannels).filter(function (k) {
      return k !== 'color';
    }).map(function (key) {
      var matchCondition = !layer.visualChannels[key].condition || layer.visualChannels[key].condition(layer.config);
      var enabled = layer.config[layer.visualChannels[key].field] || layer.visualChannels[key].defaultMeasure;
      var visualChannelDescription = layer.getVisualChannelDescription(key);

      if (matchCondition && enabled) {
        return _react["default"].createElement(LayerSizeLegend, {
          key: key,
          label: visualChannelDescription.label,
          name: visualChannelDescription.measure
        });
      }

      return null;
    }));
  }));
};

MapLegend.propTypes = propTypes;
var _default = MapLegend;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,