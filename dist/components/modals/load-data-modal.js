"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.LoadDataModal = void 0;

var _taggedTemplateLiteral2 = _interopRequireDefault(require("@babel/runtime/helpers/taggedTemplateLiteral"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var styled = _interopRequireWildcard(require("styled-components"));

var _fileUpload = _interopRequireDefault(require("../common/file-uploader/file-upload"));

function _templateObject() {
  var data = (0, _taggedTemplateLiteral2["default"])(["\n  padding: ", ";\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

var StyledLoadDataModal = styled.div(_templateObject(), function (props) {
  return props.theme.modalPadding;
});
var propTypes = {
  // call backs
  onFileUpload: _propTypes["default"].func.isRequired
};

var LoadDataModal = function LoadDataModal(props) {
  return _react["default"].createElement(StyledLoadDataModal, null, _react["default"].createElement("div", {
    className: "load-data-modal"
  }, _react["default"].createElement(_fileUpload["default"], {
    onFileUpload: props.onFileUpload
  })));
};

exports.LoadDataModal = LoadDataModal;
LoadDataModal.propTypes = propTypes;

var loadDataModalFactory = function loadDataModalFactory() {
  return LoadDataModal;
};

var _default = loadDataModalFactory;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL21vZGFscy9sb2FkLWRhdGEtbW9kYWwuanMiXSwibmFtZXMiOlsiU3R5bGVkTG9hZERhdGFNb2RhbCIsInN0eWxlZCIsImRpdiIsInByb3BzIiwidGhlbWUiLCJtb2RhbFBhZGRpbmciLCJwcm9wVHlwZXMiLCJvbkZpbGVVcGxvYWQiLCJQcm9wVHlwZXMiLCJmdW5jIiwiaXNSZXF1aXJlZCIsIkxvYWREYXRhTW9kYWwiLCJsb2FkRGF0YU1vZGFsRmFjdG9yeSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQW9CQTs7QUFDQTs7QUFDQTs7QUFFQTs7Ozs7Ozs7Ozs7O0FBRUEsSUFBTUEsbUJBQW1CLEdBQUdDLE1BQU0sQ0FBQ0MsR0FBVixvQkFDWixVQUFBQyxLQUFLO0FBQUEsU0FBSUEsS0FBSyxDQUFDQyxLQUFOLENBQVlDLFlBQWhCO0FBQUEsQ0FETyxDQUF6QjtBQUlBLElBQU1DLFNBQVMsR0FBRztBQUNoQjtBQUNBQyxFQUFBQSxZQUFZLEVBQUVDLHNCQUFVQyxJQUFWLENBQWVDO0FBRmIsQ0FBbEI7O0FBS08sSUFBTUMsYUFBYSxHQUFHLFNBQWhCQSxhQUFnQixDQUFBUixLQUFLO0FBQUEsU0FDaEMsZ0NBQUMsbUJBQUQsUUFDRTtBQUFLLElBQUEsU0FBUyxFQUFDO0FBQWYsS0FDRSxnQ0FBQyxzQkFBRDtBQUFZLElBQUEsWUFBWSxFQUFFQSxLQUFLLENBQUNJO0FBQWhDLElBREYsQ0FERixDQURnQztBQUFBLENBQTNCOzs7QUFRUEksYUFBYSxDQUFDTCxTQUFkLEdBQTBCQSxTQUExQjs7QUFFQSxJQUFNTSxvQkFBb0IsR0FBRyxTQUF2QkEsb0JBQXVCO0FBQUEsU0FBTUQsYUFBTjtBQUFBLENBQTdCOztlQUNlQyxvQiIsInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAoYykgMjAxOSBVYmVyIFRlY2hub2xvZ2llcywgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0ICogYXMgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcblxuaW1wb3J0IEZpbGVVcGxvYWQgZnJvbSAnY29tcG9uZW50cy9jb21tb24vZmlsZS11cGxvYWRlci9maWxlLXVwbG9hZCc7XG5cbmNvbnN0IFN0eWxlZExvYWREYXRhTW9kYWwgPSBzdHlsZWQuZGl2YFxuICBwYWRkaW5nOiAke3Byb3BzID0+IHByb3BzLnRoZW1lLm1vZGFsUGFkZGluZ307XG5gO1xuXG5jb25zdCBwcm9wVHlwZXMgPSB7XG4gIC8vIGNhbGwgYmFja3NcbiAgb25GaWxlVXBsb2FkOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG59O1xuXG5leHBvcnQgY29uc3QgTG9hZERhdGFNb2RhbCA9IHByb3BzID0+IChcbiAgPFN0eWxlZExvYWREYXRhTW9kYWw+XG4gICAgPGRpdiBjbGFzc05hbWU9XCJsb2FkLWRhdGEtbW9kYWxcIj5cbiAgICAgIDxGaWxlVXBsb2FkIG9uRmlsZVVwbG9hZD17cHJvcHMub25GaWxlVXBsb2FkfSAvPlxuICAgIDwvZGl2PlxuICA8L1N0eWxlZExvYWREYXRhTW9kYWw+XG4pO1xuXG5Mb2FkRGF0YU1vZGFsLnByb3BUeXBlcyA9IHByb3BUeXBlcztcblxuY29uc3QgbG9hZERhdGFNb2RhbEZhY3RvcnkgPSAoKSA9PiBMb2FkRGF0YU1vZGFsO1xuZXhwb3J0IGRlZmF1bHQgbG9hZERhdGFNb2RhbEZhY3Rvcnk7XG4iXX0=